package com.quicktutorialz.javalin;

import com.quicktutorialz.javalin.domain.Service;
import io.javalin.Context;
import io.javalin.Javalin;
import okhttp3.*;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class MainApplication {

    private static Logger log = LoggerFactory.getLogger(MainApplication.class);

    private static Map<String, String> serviceMapping = new HashMap<>();
    static {
        serviceMapping.put("javalin-api", "http://localhost:7000");
        serviceMapping.put("another-service", "http://service.host.address");
    }

    /*
        REGISTER NEW SERVICE
        curl -X POST 'http://localhost:4000/javalin-api-gateway/services/register' -H 'Content-Type:application/json; charset:utf-8' -d '{"code":"hipster","hostUrl":"http://www.hipster.com"}'

        ORIGINAL SERVICE CALL
        curl -X POST 'http://localhost:7000/javalin-api/you' -H 'Content-Type:application/json; charset:utf-8' -d '{"title":"mr.","name":"alessandro","surname":"argentieri"}'

        API GATEWAY TO REVERSE PROXY TO THE SERVICE
        curl -X POST 'http://localhost:4000/javalin-api-gateway/javalin-api/you' -H 'Content-Type:application/json; charset:utf-8' -d '{"title":"mr.","name":"alessandro","surname":"argentieri"}'
     */

    public static void main(String[] args) {

        /* ~~~~~~~~~~~~~~~~~~~~~~~~~ app declaration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        Javalin app = Javalin.create()
                .contextPath("/javalin-api-gateway")
                .enableAutogeneratedEtags()
                .enableCorsForOrigin("*")
                //.enableStaticFiles("/public")
                .start(4000);


        /* ~~~~~~~~~~~~~~~~~~~~~~ new service registration ~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        app.post("/services/register", ctx-> {
            Service service = ctx.validatedBodyAsClass(Service.class).getOrThrow();
            serviceMapping.put(service.getCode(), service.getHostUrl());
            ctx.result("Service ".concat(service.getCode()).concat(" correctly registered. "));
        });


        /* ~~~~~~~~~~~~~~~~~~~~~~~~~proxy http methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        app.get("/*", ctx->ctx.result("Hello world!"));

        app.post("/*", ctx-> {
            ctx.result(CompletableFuture.supplyAsync(() -> post(getServiceUrl(ctx), ctx.headerMap(), getMediaType(ctx), ctx.bodyAsBytes()) ));
        });


        app.put("/*", ctx->ctx.result("Hello world!"));

        app.delete("/*", ctx->ctx.result("Hello world!"));

        app.patch("/*", ctx->ctx.result("Hello world!"));

        app.options("/*", ctx->ctx.result("Hello world!"));

        app.head("/*", ctx->ctx.result("Hello world!"));

        app.trace("/*", ctx->ctx.result("Hello world!"));

        app.connect("/*", ctx->ctx.result("Hello world!"));


        /* ~~~~~~~~~~~~~~~~~~~~~~~~~ filtering methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        //filtering all
        app.before(ctx->{log.info(ctx.path());});

        //filtering a Path
        app.before("/you/*", ctx->{log.info(ctx.ip());});

        //after Responding to a Path
        app.after("/you/*", ctx->{log.info(ctx.url());});

    }



    /* ~~~~~~~~~~~~~~~~~~~~~~~~~utility methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    private static String getMediaType(Context ctx) {
        return ctx.header("Content-Type");
    }

    private static String getServiceUrl(final Context ctx) {
        String[] splittedUrl = ctx.url().split("/javalin-api-gateway");
        String serviceName = splittedUrl[1].split("/")[1];
        String queryString = ctx.queryString()!=null ? "?".concat(ctx.queryString()) : "";
        return serviceMapping.get(serviceName).concat(splittedUrl[1]).concat(queryString);
    }

    public static InputStream post(String url, Map<String, String> headers, String mediaType, byte[] content) {
        OkHttpClient client = new OkHttpClient();
        try {
            Response response = client.newCall(composePostRequest(url, headers, mediaType, content)).execute();
            return response.body().byteStream();
        } catch (IOException e) {
            return new ByteArrayInputStream(e.getMessage().getBytes());
        }
    }

    @NotNull
    private static Request composePostRequest(String url, Map<String, String> headers, String mediaType, byte[] content) {
        return new Request.Builder()
                    .url(url)
                    .headers(Headers.of(headers))
                    .post(RequestBody.create(MediaType.parse(mediaType), content))
                    .build();
    }

}
