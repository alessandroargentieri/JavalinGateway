package com.quicktutorialz.javalin;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.quicktutorialz.javalin.domain.auth.AuthRequest;
import com.quicktutorialz.javalin.domain.Service;
import com.quicktutorialz.javalin.domain.auth.AuthResponse;
import io.javalin.Context;
import io.javalin.Javalin;
import okhttp3.*;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class MainApplication {

    private static Logger log = LoggerFactory.getLogger(MainApplication.class);

    private static Map<String, String> serviceMapping = new HashMap<>();
    static {
        serviceMapping.put("javalin-api", "http://localhost:7000");
        serviceMapping.put("another-service", "http://service.host.address");
    }

    private static StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
    static {
        encryptor.setPassword(getEnv("ENCRYPTION_PASSPHRASE"));
        encryptor.setAlgorithm("PBEWithMD5AndTripleDES");
    }
    private static ObjectMapper mapper = new ObjectMapper();


    /*
        REGISTER NEW SERVICE
        curl -X POST 'http://localhost:4000/javalin-api-gateway/services/register' -H 'Content-Type:application/json; charset:utf-8' -d '{"code":"hipster","hostUrl":"http://www.hipster.com"}'

        ORIGINAL SERVICE CALL
        curl -X POST 'http://localhost:7000/javalin-api/you' -H 'Content-Type:application/json; charset:utf-8' -d '{"title":"mr.","name":"alessandro","surname":"argentieri"}'

        API GATEWAY TO REVERSE PROXY TO THE SERVICE
        curl -X POST 'http://localhost:4000/javalin-api-gateway/javalin-api/you' -H 'Content-Type:application/json; charset:utf-8' -d '{"title":"mr.","name":"alessandro","surname":"argentieri"}'
     */

    public static void main(String[] args) {

        /* ~~~~~~~~~~~~~~~~~~~~~~~~~ app declaration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        Javalin app = Javalin.create()
                .contextPath("/javalin-api-gateway")
                .enableAutogeneratedEtags()
                .enableCorsForOrigin("*")
                //.enableStaticFiles("/public")
                .start(4000);


        /* ~~~~~~~~~~~~~~~~~~~~~~ new service registration ~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        app.post("/services/register", ctx-> {
            Service service = ctx.validatedBodyAsClass(Service.class).getOrThrow();
            serviceMapping.put(service.getCode(), service.getHostUrl());
            ctx.result("Service ".concat(service.getCode()).concat(" correctly registered. "));
        });


        app.post("/login", ctx-> {
            /*
            curl -X POST -H 'Accept: application/json' 'https://github.com/login/oauth/access_token?client_id=<clientId>&client_secret=<clientSecret>&code=<temporaryCode>&redirect_uri=<fullRegisteredFrontendCallBackUrlForFirstStep>&state=fknrrdyjikfn'
             */

            ctx.result(CompletableFuture.supplyAsync(()->{
                        String clientSecret    = getEnv("OAUTH2_CLIENT_SECRET");
                        String accessTokenUrl  = getEnv("OAUTH2_ACCESS_TOKEN_URL");

                        AuthRequest authRequest = ctx.validatedBodyAsClass(AuthRequest.class).getOrThrow();
                        String authUrl = getAccessTokenUrl(clientSecret, accessTokenUrl, authRequest);

                        try {
                            /*
                                {"access_token":"95d1aa92a0f11e40115e7630ee3a4f32c3da8afb","token_type":"bearer","scope":"user"}
                           */
                            Map<String, String> authMap = mapper.readValue(post(authUrl, ctx.headerMap(), "application/json", null), Map.class);
                            String accessToken = authMap.get("access_token");
                            String userUrl = getEnv("OAUTH2_PROVIDER_URL").concat("/").concat(authMap.get("scope"));
                            Map<String, String> userHeaders = new HashMap<>();
                            userHeaders.put("Authorization: ", "token ".concat(accessToken));
                            //curl -X GET -H 'Authorization: token 95d1aa92a0f11e40115e7630ee3a4f32c3da8afb' https://api.github.com/user
                            Map<String, Object> userMap = mapper.readValue(get(userUrl, userHeaders, "application/json"), Map.class);
                            String id = (String) userMap.get("id");
                            String name = (String) userMap.get("name");
                            String jwt = generateJwt( encrypt(id, name, accessToken) );

                            ctx.header("jwt", jwt);
                            //TODO verificare che l'header jwt sia presente in output.
                            return new ByteArrayInputStream(mapper.writeValueAsString(new AuthResponse(id, name, jwt)).getBytes());
                        } catch (IOException e) {
                            return new ByteArrayInputStream(e.getMessage().getBytes());
                        }

                    })
            );



        });


        /* ~~~~~~~~~~~~~~~~~~~~~~~~~proxy http methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        app.get("/*", ctx->ctx.result("Hello world!"));

        app.post("/*", ctx-> {
            ctx.result(CompletableFuture.supplyAsync(() -> post(getServiceUrl(ctx), ctx.headerMap(), getMediaType(ctx), ctx.bodyAsBytes()) ));
        });


        app.put("/*", ctx->ctx.result("Hello world!"));

        app.delete("/*", ctx->ctx.result("Hello world!"));

        app.patch("/*", ctx->ctx.result("Hello world!"));

        app.options("/*", ctx->ctx.result("Hello world!"));

        app.head("/*", ctx->ctx.result("Hello world!"));

        app.trace("/*", ctx->ctx.result("Hello world!"));

        app.connect("/*", ctx->ctx.result("Hello world!"));


        /* ~~~~~~~~~~~~~~~~~~~~~~~~~ filtering methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

        //filtering all
        app.before(ctx->{log.info(ctx.path());});

        //filtering a Path
        app.before("/you/*", ctx->{log.info(ctx.ip());});

        //after Responding to a Path
        app.after("/you/*", ctx->{log.info(ctx.url());});

    }

    private static String encrypt(String id, String name, String accessToken) {
        return encryptor.encrypt( id.concat(":").concat(name).concat(":").concat(accessToken) );
    }

    private static AuthResponse decrypt(String encryptedPayload) {
        String[] payload = encryptor.decrypt(encryptedPayload).split(":");
        return new AuthResponse(payload[0], payload[1], payload[2]);
    }

    private static String generateJwt(String encryptedPayload) {
        Algorithm algorithm = Algorithm.HMAC256( getEnv("JWT_SECRET_KEY") );
        return JWT.create()
                    .withIssuer("Javalin-Gateway")
                    .withClaim("data", encryptedPayload)
                    .withExpiresAt(getExpirationDate())
                    .sign(algorithm);
    }

    private static Date getExpirationDate() {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        calendar.add(Calendar.HOUR_OF_DAY, 1);
        return calendar.getTime();
    }

    private static String verifyJwt(String jwt) {
        try {
            Algorithm algorithm = Algorithm.HMAC256( getEnv("JWT_SECRET_KEY") );
            JWTVerifier verifier = JWT.require(algorithm)
                    .withIssuer("Javalin-Gateway")
                    .build(); //Reusable verifier instance
            DecodedJWT decoded = verifier.verify(jwt);
            return decoded.getPayload();
        } catch (JWTVerificationException exception){
            return null;
        }
    }

    @NotNull
    private static String getAccessTokenUrl(String clientSecret, String accessTokenUrl, AuthRequest authRequest) {
        return accessTokenUrl
                .concat("?client_id=")
                .concat(authRequest.getClientId())
                .concat("&client_secret=")
                .concat(clientSecret)
                .concat("&code=")
                .concat(authRequest.getCode())
                .concat("&redirect_uri=")
                .concat(authRequest.getRedirectUri())
                .concat("&state=")
                .concat(authRequest.getState());
    }



    /* ~~~~~~~~~~~~~~~~~~~~~~~~~utility methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    private static String getMediaType(Context ctx) {
        return ctx.header("Content-Type");
    }

    private static String getServiceUrl(final Context ctx) {
        String[] splittedUrl = ctx.url().split("/javalin-api-gateway");
        String serviceName = splittedUrl[1].split("/")[1];
        String queryString = ctx.queryString()!=null ? "?".concat(ctx.queryString()) : "";
        return serviceMapping.get(serviceName).concat(splittedUrl[1]).concat(queryString);
    }

    public static InputStream post(String url, Map<String, String> headers, String mediaType, byte[] content) {
        OkHttpClient client = new OkHttpClient();
        try {
            Response response = client.newCall(composePostRequest(url, headers, mediaType, content)).execute();
            return response.body().byteStream();
        } catch (IOException e) {
            return new ByteArrayInputStream(e.getMessage().getBytes());
        }
    }

    @NotNull
    private static Request composePostRequest(String url, Map<String, String> headers, String mediaType, byte[] content) {
        return new Request.Builder()
                          .url(url)
                          .headers(Headers.of(headers))
                          .post(RequestBody.create(MediaType.parse(mediaType), content))
                          .build();
    }


    public static InputStream get(String url, Map<String, String> headers, String mediaType) {
        OkHttpClient client = new OkHttpClient();
        headers.put("Content-Type:", mediaType);
        try {
            Response response = client.newCall(composeGetRequest(url, headers)).execute();
            return response.body().byteStream();
        } catch (IOException e) {
            return new ByteArrayInputStream(e.getMessage().getBytes());
        }
    }

    @NotNull
    private static Request composeGetRequest(String url, Map<String, String> headers) {
        return new Request.Builder()
                          .url(url)
                          .headers(Headers.of(headers))
                          .get()
                          .build();
    }

    private static String getEnv(String envName) {
        String envValue = System.getenv(envName);
        if(envValue==null)
            envValue = "default";
        return envValue;
    }





}
