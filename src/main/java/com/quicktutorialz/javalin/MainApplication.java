package com.quicktutorialz.javalin;

import com.sun.xml.internal.ws.client.sei.ResponseBuilder;
import io.javalin.Javalin;
import okhttp3.*;
import okhttp3.internal.http.RealResponseBody;
import okio.BufferedSource;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sun.net.www.http.HttpClient;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

public class MainApplication {

    private static Logger log = LoggerFactory.getLogger(MainApplication.class);

    public static void main(String[] args) {



        Javalin app = Javalin.create()
                .contextPath("/javalin-api-gateway")
                .enableAutogeneratedEtags()
                .enableCorsForOrigin("*")
                .enableDebugLogging()
              //  .enableStaticFiles("/public")
                .start(7000);



        app.get("/*", ctx->ctx.result("Hello world!"));

        app.post("/*", ctx-> {



            ctx.json( post(ctx.url(), ctx.headerMap(), "application/json", ctx.bodyAsBytes()) );
        });

        app.put("/*", ctx->ctx.result("Hello world!"));

        app.delete("/*", ctx->ctx.result("Hello world!"));

        app.patch("/*", ctx->ctx.result("Hello world!"));

        app.options("/*", ctx->ctx.result("Hello world!"));

        app.head("/*", ctx->ctx.result("Hello world!"));

        app.trace("/*", ctx->ctx.result("Hello world!"));

        app.connect("/*", ctx->ctx.result("Hello world!"));


        //completableFutureResponse
        app.post("/completable/you", ctx->{
    //        ctx.json( CompletableFuture.supplyAsync(()-> ctx.bodyAsClass(User.class)) );
        });

        //pathParam
        app.get("/hello/:name", ctx->{
            String name  = ctx.pathParam("name");
            ctx.result("Hello " + name);
        });

        //queryParam
        app.get("/hi", ctx->{
            String name  = ctx.queryParam("name");
            ctx.result("Hello " + name);
        });

        //formParam
        app.post("/ola", ctx->{
            String name  = ctx.formParam("name");
            String surname  = ctx.formParam("surname");
            ctx.result("Hello " + name + " " + surname);
        });


        //filtering all
        app.before(ctx->{log.info(ctx.path());});

        //filtering a Path
        app.before("/you/*", ctx->{log.info(ctx.ip());});

        //after Responding to a Path
        app.after("/you/*", ctx->{log.info(ctx.url());});






    }


    public static CompletionStage<Response> post(String url, Map<String, String> headers, String mediaType, byte[] content) throws Exception {

        return CompletableFuture.supplyAsync(() -> new OkHttpClient())
                .thenApply(client -> {
                    try {
                        return client.newCall(composePostRequest(url, headers, mediaType, content)).execute();
                    } catch (IOException e) {
                        log.error(e.getMessage());
                        return new Response.Builder().code(500).message(e.getMessage()).build();
                    }
                });

       /* OkHttpClient client = new OkHttpClient();
            Request request = new Request.Builder()
                    .url(url)
                    .headers(headers)
                    .post(body)
                    .build();

            Response response = client.newCall(request).execute();
            //return response.body().string(); */
    }

    @NotNull
    private static Request composePostRequest(String url, Map<String, String> headers, String mediaType, byte[] content) {
        return new Request.Builder()
                    .url(url)
                    .headers(Headers.of(headers))
                    .post(RequestBody.create(MediaType.parse(mediaType), content))
                    .build();
    }


}
